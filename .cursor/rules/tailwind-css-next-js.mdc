---
description: 
globs: 
alwaysApply: false
---
# Tailwind CSS (Next.js Guide)

# Tailwind CSS & Next.js Development Guide

## Prompt Generation Rules
- **Component Requirements Analysis**: Thoroughly analyze the component requirements before starting development.
- **Tailwind CSS Classes**: Specify desired Tailwind CSS classes for styling.
- **TypeScript Types/Interfaces**: Mention any required TypeScript types or interfaces.
- **Responsive Design**: Include instructions for responsive design.
- **Next.js Features**: Suggest appropriate Next.js features if applicable.
- **State Management/Hooks**: Specify any necessary state management or hooks.
- **Accessibility**: Include accessibility considerations.
- **Error Handling/Loading States**: Suggest error handling and loading states.
- **Animations/Transitions**: Include instructions for animations or transitions if needed.
- **API Integrations/Data Fetching**: Specify any required API integrations or data fetching.
- **Performance Optimization**: Mention performance optimization techniques if applicable.
- **Documentation**: Suggest documentation requirements for the component.

## General Component Creation Guidelines
- **Reusability and Modularity**: Prioritize reusability and modularity.
- **Naming Conventions**: Ensure consistent naming conventions.
- **React Best Practices**: Follow React best practices and patterns.
- **Prop Validation**: Implement proper prop validation.
- **SEO Optimization**: Optimize for SEO when applicable.

## General Rules
- **Strict TypeScript**: Enable strict TypeScript (`strict: true` in `tsconfig.json`).
- **Avoid 'any'**: Prefer 'unknown' with runtime checks.
- **Explicit Typing**: Explicitly type function inputs and outputs.
- **Advanced TypeScript Features**: Use advanced TypeScript features (type guards, mapped types, conditional types).
- **Separation of Concerns**: Separate concerns: presentational components, business logic, side effects.

## Next.js Rules
- **Dynamic Routes**: Use dynamic routes with bracket notation (`[id].tsx`).
- **Route Parameters**: Validate and sanitize route parameters.
- **Flat Routes**: Prefer flat, descriptive routes.
- **Data Fetching**: Use `getServerSideProps` for dynamic data, `getStaticProps`/`getStaticPaths` for static.
- **ISR**: Implement Incremental Static Regeneration (ISR) where appropriate.
- **Image Optimization**: Use `next/image` for optimized images.
- **Image Attributes**: Configure image layout, priority, sizes, and `srcSet` attributes.

## TypeScript Rules
- **Strict Mode**: Enable all strict mode options in `tsconfig.json`.
- **Explicit Typing**: Explicitly type all variables, parameters, and return values.
- **Utility Types**: Use utility types, mapped types, and conditional types.
- **Interface vs Type**: Prefer 'interface' for extendable object shapes, 'type' for unions, intersections, and primitive compositions.
- **JSDoc Documentation**: Document complex types with JSDoc.
- **Discriminated Unions**: Avoid ambiguous union types, use discriminated unions when necessary.

## TailwindCSS
- **Utility Classes**: Use TailwindCSS utility classes for styling.
- **Custom CSS**: Avoid custom CSS unless absolutely necessary.
- **Class Order**: Maintain consistent order of utility classes.
- **Responsive Variants**: Use Tailwind's responsive variants for adaptive designs.
